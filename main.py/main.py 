from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from pydantic import BaseModel
from dotenv import load_dotenv
from openai import OpenAI
from mem0 import Memory
import os

# Load environment variables
load_dotenv()

# Initialize components
app = FastAPI()
openai_client = OpenAI()

config = {
    "llm": {
        "provider": "openai",
        "config": {
            "model": os.getenv('MODEL_CHOICE', 'gpt-4o-mini')
        }
    },
    "vector_store": {
        "provider": "supabase",
        "config": {
            "connection_string": os.environ['DATABASE_URL'],
            "collection_name": "memories"
        }
    }
}
memory = Memory.from_config(config)

class ChatMessage(BaseModel):
    user_id: str
    message: str

# WebSocket Endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            # Receive data from the client
            data = await websocket.receive_json()
            user_id = data["user_id"]
            message = data["message"]

            # Retrieve relevant memories
            relevant_memories = memory.search(query=message, user_id=user_id, limit=3)
            memories_str = "\n".join(f"- {entry['memory']}" for entry in relevant_memories["results"])

            # Generate AI response
            system_prompt = f"You are a helpful AI. Answer based on user query and memories.\nUser Memories:\n{memories_str}"
            messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": message}]
            
            response = openai_client.chat.completions.create(
                model="gpt-4o-mini", messages=messages
            )
            assistant_response = response.choices[0].message.content

            # Store new memories
            messages.append({"role": "assistant", "content": assistant_response})
            memory.add(messages, user_id=user_id)

            # Send response back to WebSocket client
            await websocket.send_json({
                "status": "success",
                "user_id": user_id,
                "message": assistant_response,
                "memories_used": [entry['memory'] for entry in relevant_memories["results"]]
            })
    
    except WebSocketDisconnect:
        print("Client disconnected")
